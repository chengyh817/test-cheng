name: "Terraform Infrastructure Change Management Pipeline with GitHub Actions"
 
on:
 push:
   branches:
   - main
 pull_request: {}
 
env:
 # verbosity setting for Terraform logs
 TF_LOG: INFO

 ALICLOUD_ACCESS_KEY: ${{ secrets.ALICLOUD_ACCESS_KEY }}
 ALICLOUD_SECRET_KEY: ${{ secrets.ALICLOUD_SECRET_KEY }}
 
jobs:
 terraform:
   name: "Terraform Infrastructure Change Management"
   runs-on: ubuntu-latest
   defaults:
     run:
       shell: bash
       # We keep Terraform files in the terraform directory.
       working-directory: .
 
   steps:
     - name: Checkout the repository to the runner
       uses: actions/checkout@v2
 
     - name: Setup Terraform with specified version on the runner
       uses: hashicorp/setup-terraform@v2
       with:
         terraform_version: 1.3.0
         cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}


     - name: Terraform format
       id: fmt
       run: terraform fmt -check || echo true

     - name: Terraform init
       id: init
       run: terraform init

     - name: Terraform validate
       id: validate
       run: terraform validate
    
 
     - name: Terraform plan
       id: plan
       if: github.event_name == 'push'
       run: terraform plan -no-color -input=false
       continue-on-error: true

    
    #  - uses: actions/github-script@v6
    #    if: github.event_name == 'push'
    
    #    env:
    #      PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
    #    with:
    #      script: |
    #        const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
    #        #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
    #        #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
    #        #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
 
    #        <details><summary>Show Plan</summary>
 
    #        \`\`\`\n
    #        ${process.env.PLAN}
    #        \`\`\`
 
    #        </details>
    #        *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
 
    #        github.rest.issues.createComment({
    #          issue_number: context.issue.number,
    #          owner: context.repo.owner,
    #          repo: context.repo.repo,
    #          body: output
    #        })
 
     - name: Terraform Plan Status
       if: steps.plan.outcome == 'failure'
       run: exit 1
 
     - name: Terraform Apply
       if: github.ref == 'refs/heads/main' && github.event_name == 'push'
       run: terraform apply -auto-approve -input=false
